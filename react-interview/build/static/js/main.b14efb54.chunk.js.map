{"version":3,"sources":["components/navigation/index.js","components/navigation/navigation.js","components/layout/index.js","components/layout/layout.js","pages/homepage.js","pages/image.js","pages/testScroll.js","routes.js","serviceWorker.js","index.js"],"names":["Navigation","AppBar","position","Toolbar","Grid","container","spacing","item","Button","component","Link","to","variant","Layout","children","Container","api","Homepage","state","images","items","loadingState","tracks","hasMoreItems","pageIndex","likeImage","page","this","self","url","qwest","limit","cache","then","xhr","resp","map","track","push","setState","setTimeout","loader","key","i","xs","toString","Card","CardHeader","title","id","alt","src","download_url","width","effect","author","CardActions","disableSpacing","pageStart","loadMore","loadItems","bind","hasMore","className","direction","justify","alignItems","React","Component","ImagePage","useState","setTrack","useParams","useRouteMatch","IconButton","height","Typography","TestScrollpage","nextHref","client_id","linked_partitioning","page_size","collection","artwork_url","user","avatar_url","next_href","href","permalink_url","target","App","path","exact","Imagepage","TestScrollPage","style","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b14efb54.chunk.js","sourcesContent":["import Navigation from \"./navigation\";\n\nexport default Navigation;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { AppBar, Toolbar, Button, Grid } from \"@material-ui/core\";\n\nconst Navigation = () => {\n  return (\n    <>\n      <AppBar position=\"fixed\">\n        <Toolbar>\n          <Grid container spacing={2}>\n            <Grid item>\n              <Button\n                component={Link}\n                to=\"/\"\n                variant=\"contained\"\n              >\n                Home\n              </Button>\n            </Grid>\n           \n          </Grid>\n        </Toolbar>\n      </AppBar>\n      <Toolbar />\n    </>\n  );\n};\n\nexport default Navigation;","import Layout from \"./layout\";\n\nexport default Layout;\n","import React from \"react\";\nimport { Container } from \"@material-ui/core\";\n\nimport Navigation from \"../navigation\";\n\nconst Layout = ({ children }) => {\n  return (\n    <>\n      <Navigation />\n      <Container>\n        {children}\n      </Container>\n    </>\n  );\n};\n\nexport default Layout;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Grid,\n  Card,\n  CardHeader,\n  CardMedia,\n  CardActions,\n  Button\n} from \"@material-ui/core\";\nimport { MdFavorite } from \"react-icons/md\";\n\nimport Layout from \"../components/layout\";\nimport InfiniteScroll from 'react-infinite-scroller';\nimport * as qwest from 'qwest';\nimport useStore, { createStore } from \"global-hook-store\";\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\nimport 'react-lazy-load-image-component/src/effects/blur.css';\n\nconst imageList = [];\nconst api = {\n    baseUrl: 'https://picsum.photos/v2/list',\n    limit:10\n};\nclass Homepage extends React.Component {\n  state = {\n    images: [],\n    items: 10,\n    loadingState: false,\n   \n    tracks: [],\n    hasMoreItems: true,\n    pageIndex:1\n  };\n\n  ///\n  loadItems(page) {\n   \n    if(this.state.loadingState){\n      return;\n    }\n    var self = this;\n    var url = api.baseUrl /*+ '/users/8665091/favorites'*/;\n    \n    qwest.get(url, {\n           // client_id: api.client_id,\n           page: this.state.pageIndex,\n           limit: api.limit\n        }, {\n            cache: true\n        })\n        .then(function(xhr, resp) {\n            if(resp) {\n                var tracks = self.state.tracks;\n                resp.map((track) => {\n                    /*if(track.artwork_url == null) {\n                        track.artwork_url = track.user.avatar_url;\n                    }*/\n                    tracks.push(track);\n                });\n                \n                self.setState({ loadingState: true });\n                //delay\n                setTimeout(() => {\n                  \n                  self.setState({tracks: tracks, pageIndex: self.state.pageIndex + 1, loadingState: false });\n               \n                }, 3000);\n\n            }\n        });\n}\n\n///  \n  likeImage = () => {};\n  /*<CardMedia\n  style={{ paddingTop: '56.25%' }}\n  image={track.download_url}\n  title={track.author}\n/>*/\n  render() {\n\n    const loader = <div  key=\"1232edqda\" >Loading ...</div>;\n\n        var items = [];\n        this.state.tracks.map((track, i) => {\n          items.push(\n                <Grid item xs={4} key={i.toString()} >\n                  <Card>\n                    <CardHeader title={<Link to=\"/\">{track.id}</Link>} />\n                    <Link to={`/image/${track.id}`}>\n                      <LazyLoadImage\n                        alt=\"\"\n                        src={track.download_url} // use normal <img> attributes as props\n                        width=\"100%\" \n                        effect=\"blur\"/>\n                    </Link>\n                    <span>{track.author}</span>\n                    <CardActions disableSpacing>\n                      <Button>\n                        <MdFavorite /> 0\n                      </Button>\n                    </CardActions>\n                  </Card>\n                </Grid>\n            );\n        });\n\n    return (\n      <>\n       <InfiniteScroll\n                pageStart={0}\n                loadMore={this.loadItems.bind(this)}\n                hasMore={this.state.hasMoreItems}\n                loader={loader}>\n               <Layout>\n                  <p className=\"loading\">Loaded pages:{this.state.pageIndex}</p>\n                  <Grid container\n                    direction=\"row\"\n                    justify=\"center\"\n                    alignItems=\"flex-start\" \n                    xs={12}>\n                    \n                    {items}\n\n                  </Grid>\n                </Layout>\n                \n            </InfiniteScroll>\n      {this.state.loadingState ? <p className=\"loading\"> loading More Items..</p> : \"\"}\n      </>\n    );\n  }\n}\n\nexport default Homepage;\n","import React, { useState } from \"react\";\nimport { BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch,\n  useParams} from \"react-router-dom\";\nimport {\n  Grid,\n  IconButton, Typography\n} from \"@material-ui/core\";\nimport { MdFileDownload } from \"react-icons/md\";\n\nimport Layout from \"../components/layout\";\nimport * as qwest from 'qwest';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\nimport 'react-lazy-load-image-component/src/effects/blur.css';\n\n\nconst ImagePage = () => {\n  const [track, setTrack] = useState(0); \n  const self = this;\n  let { id } = useParams();\n  let match = useRouteMatch();\nlet prevId = 1005;\n    qwest.get(`https://picsum.photos/id/${id}/info`, {\n\n      }, {\n        cache: true\n      })\n      .then(function(xhr, resp) {\n        if(resp) {\n          setTrack(resp);\n        }\n      });\n       /*id: \"10\"\n      author: \"Paul Jarvis\"\n      width: 2500\n      height: 1667\n      url: \"https://unsplash.com/photos/6J--NXulQCs\"\n      download_url: \"https://picsum.photos/id/10/2500/1667\"\n      */\n    return (\n\n      <Layout>\n       \n        <Grid container spacing={2} justify=\"center\">\n          <Grid item xs={12}>\n            <Grid container justify=\"center\">\n              <Grid item>\n                <IconButton>\n                  <MdFileDownload />\n                </IconButton>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid container xs={8} direction=\"column\" spacing={2}>\n          \n            <Grid item xs={6}>\n              <LazyLoadImage\n                alt=\"\"\n                height={\"100%\"}\n                src={track.download_url} // use normal <img> attributes as props\n                width=\"100%\" \n                effect=\"blur\"/>\n            </Grid>\n            <Grid item xs={2}>\n              <p>{track.id}</p>\n              <p>{track.author}</p> \n              <p>{track.width}</p>\n              <p>{track.height}</p>\n              <p>{track.url}</p>\n              <p>{track.download_url}</p>\n            </Grid>\n          </Grid>\n        </Grid>\n        <div>\n          <Typography variant=\"h5\">Related images</Typography>\n          <Grid container spacing={2} justify=\"space-between\">\n            <Grid item>\n              <Link to={`/image/${prevId}`}>Previous</Link>\n            </Grid>\n            <Grid item>\n              <Link to=\"/image/1\">Next</Link>\n            </Grid>\n          </Grid>\n        </div>\n      </Layout> \n        \n    );\n  \n}\n\nexport default ImagePage;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Grid,\n  Card,\n  CardHeader,\n  CardMedia,\n  CardActions,\n  Button\n} from \"@material-ui/core\";\nimport { MdFavorite } from \"react-icons/md\";\n\nimport Layout from \"../components/layout\";\nimport InfiniteScroll from 'react-infinite-scroller';\nimport * as qwest from 'qwest';\n\n    const imageList = [];\nconst api = {\n  \n    baseUrl: 'https://api.soundcloud.com',\n    client_id: 'caf73ef1e709f839664ab82bef40fa96'\n};\nclass TestScrollpage extends React.Component {\n  state = {\n    \n    tracks: [],\n    hasMoreItems: true,\n   \n    nextHref: null\n  };\n \n  loadItems(page) {\n    var self = this;\n\n    var url = api.baseUrl + '/users/8665091/favorites';\n    if(this.state.nextHref) {\n        url = this.state.nextHref;\n    }\n    debugger;\n    qwest.get(url, {\n            client_id: api.client_id,\n            linked_partitioning: 1,\n            page_size: 10\n        }, {\n            cache: true\n        })\n        .then(function(xhr, resp) {\n            if(resp) {\n                var tracks = self.state.tracks;\n                resp.collection.map((track) => {\n                    if(track.artwork_url == null) {\n                        track.artwork_url = track.user.avatar_url;\n                    }\n\n                    tracks.push(track);\n                });\n\n                if(resp.next_href) {\n                    self.setState({\n                        tracks: tracks,\n                        nextHref: resp.next_href\n                    });\n                } else {\n                    self.setState({\n                        hasMoreItems: false\n                    });\n                }\n            }\n        });\n}\n\nrender() {\n    const loader = <div className=\"loader\">Loading ...</div>;\n\n    var items = [];\n    this.state.tracks.map((track, i) => {\n        items.push(\n            <div className=\"track\" key={i}>\n                <a href={track.permalink_url} target=\"_blank\">\n                    <img src={track.artwork_url} width=\"150\" height=\"150\" />\n                    <p className=\"title\">{track.title}</p>\n                </a>\n            </div>\n        );\n    });\n\n    return (\n        <InfiniteScroll\n            pageStart={0}\n            loadMore={this.loadItems.bind(this)}\n            hasMore={this.state.hasMoreItems}\n            loader={loader}>\n\n            <div className=\"tracks\">\n                {items}\n            </div>\n        </InfiniteScroll>\n    );\n}\n}\n\nexport default TestScrollpage;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport Homepage from \"./pages/homepage\";\nimport Imagepage from \"./pages/image\";\nimport TestScrollPage from \"./pages/testScroll\";\n\nconst App = () => (\n  <Router>\n    <Switch>\n      <Route path=\"/\" exact component={Homepage} />\n      <Route path=\"/image/:id\" exact component={Imagepage} />\n      <Route path=\"/test\" exact component={TestScrollPage} />\n      <Route component={() => <h1 style={{ textAlign: 'center' }}>404</h1>} />\n    </Switch>\n  </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './routes';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}